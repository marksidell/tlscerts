#!/usr/bin/python

from __future__ import print_function

import boto3
from botocore.client import Config
import time
import subprocess
import collections
import sys
import os
import datetime

sys.path.append(os.path.dirname(os.path.realpath(__file__)))
from config import TLSCERTS_S3FOLDER, TLSCERTS_S3FOLDER_LATEST, TLSCERTS_KMSKEYID

TTL = 10


def validateParams(params, n):
    if len(params) < n:
        raise RuntimeError('ERROR: Expected {} params, got {}.'.format(n, len(params)))


def getZoneId(r53, name):
    id = next(
        (zone['Id']
            for zone in r53.list_hosted_zones()['HostedZones']
            if zone['Name'] == '.'.join(name.split('.')[-2:])+'.'),
        None)

    if not id:
        raise Exception('Unable to find hosted zone for {}'.format(name))

    # The Id string is '/hostedzone/<id>'
    return id.split('/')[-1]


def putFile(s3, body, fullpath):
    print('Put {}'.format(fullpath))
    path = fullpath.split('/')

    s3.put_object(
        Body=body,
        Bucket=path[0],
        Key='/'.join(path[1:]),
        ServerSideEncryption='aws:kms',
        SSEKMSKeyId=TLSCERTS_KMSKEYID,
    )

def putCertFile(s3, now, src, dst):
    body = open(src, 'r').read()

    putFile(s3, body, '{}/{}/{}'.format(TLSCERTS_S3FOLDER, now, dst))
    putFile(s3, body, '{}/{}'.format(TLSCERTS_S3FOLDER_LATEST, dst))


def doZoneCmd(params, action):
    validateParams(params, 3)

    r53 = boto3.client('route53')
    
    result = r53.change_resource_record_sets(
        HostedZoneId=getZoneId(r53, params[0]),
        ChangeBatch={
            'Changes':
            [
                {
                    'Action': action,
                    'ResourceRecordSet':
                    {
                        'Name': '_acme-challenge.{}.'.format(params[0]),
                        'Type': 'TXT',
                        'TTL': TTL,
                        'ResourceRecords': [{'Value': '"{}"'.format(params[2]) }],
                    }
                }
            ]
        })

    change_info = result.get('ChangeInfo')

    if not change_info or 'PENDING' != change_info.get('Status'):
        raise Exception( 'Failed {} {}: {}'.format(action, params[0], params[2]))


def doDeployChallenge(params):
    doZoneCmd(params, 'UPSERT')
    print( 'Pausing for 30...')
    time.sleep(30)


def doCleanChallenge(params):
    doZoneCmd(params, 'DELETE')


def doDeployCert(params):
    validateParams(params, 5)

    domain = params[0]
    now = datetime.datetime.today().strftime('%Y%m%d%H%M%S')

    # s3v4 is required to use KMS encryption
    s3 = boto3.client('s3', config=Config(signature_version='s3v4'))

    putCertFile(s3, now, params[1], 'privkey.pem')
    putCertFile(s3, now, params[2], 'cert.pem')
    putCertFile(s3, now, params[3], 'fullchain.pem')
    putCertFile(s3, now, params[4], 'chain.pem')


CMDS = {
    'deploy_challenge': doDeployChallenge,
    'clean_challenge': doCleanChallenge,
    'deploy_cert': doDeployCert,
}

print(' '.join(sys.argv))

cmd = sys.argv[1]

if not cmd in CMDS:
    raise Exception( 'Unknown command {}'.format(cmd))

CMDS[cmd](sys.argv[2:])
